name: Build Dispatcher

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'containers/**'

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      base-root-config-bat: ${{ steps.filter.outputs.base-root-config-bat }}
      base-root-config-glamour: ${{ steps.filter.outputs.base-root-config-glamour }}
      base-root-config-micro: ${{ steps.filter.outputs.base-root-config-micro }}
      base-root-config-emacs: ${{ steps.filter.outputs.base-root-config-emacs }}
      base-root-config-nvim: ${{ steps.filter.outputs.base-root-config-nvim }}
      base-root-changed: ${{ steps.consolidate.outputs.base-root-changed }}
      base-changed: ${{ steps.consolidate.outputs.base-changed }}
      lab1-client-changed: ${{ steps.consolidate.outputs.lab1-client-changed }}
      lab1-changed: ${{ steps.consolidate.outputs.lab1-changed }}
      lab2-client-changed: ${{ steps.consolidate.outputs.lab2-client-changed }}
      lab2-changed: ${{ steps.consolidate.outputs.lab2-changed }}
      lab3-client-changed: ${{ steps.consolidate.outputs.lab3-client-changed }}
      lab3-changed: ${{ steps.consolidate.outputs.lab3-changed }}
      lab4-client-changed: ${{ steps.consolidate.outputs.lab4-client-changed }}
      lab4-changed: ${{ steps.consolidate.outputs.lab4-changed }}
      lab5-client-changed: ${{ steps.consolidate.outputs.lab5-client-changed }}
      lab5-changed: ${{ steps.consolidate.outputs.lab5-changed }}
      lab6-client-changed: ${{ steps.consolidate.outputs.lab6-client-changed }}
      lab6-changed: ${{ steps.consolidate.outputs.lab6-changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use paths-filter action
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            base-root-config-bat:
              - 'containers/base/root/.config/bat/**'
            base-root-config-glamour:
              - 'containers/base/root/.config/glamour/**'
            base-root-config-micro:
              - 'containers/base/root/.config/micro/**'
            base-root-config-emacs:
              - 'containers/base/root/.config/emacs/**'
            base-root-config-nvim:
              - 'containers/base/root/.config/nvim/**'
            base-root:
              - 'containers/base/root/**'
            base:
              - 'containers/base/**'
            lab1-client:
              - 'containers/lab1/client/**'
            lab1:
              - 'containers/lab1/**'
            lab2-client:
              - 'containers/lab2/client/**'
            lab2:
              - 'containers/lab2/**'
            lab3-client:
              - 'containers/lab3/client/**'
            lab3:
              - 'containers/lab3/**'
            lab4-client:
              - 'containers/lab4/client/**'
            lab4:
              - 'containers/lab4/**'
            lab5-client:
              - 'containers/lab5/client/**'
            lab5:
              - 'containers/lab5/**'
            lab6-client:
              - 'containers/lab6/client/**'
            lab6:
              - 'containers/lab6/**'

      - name: Consolidate change logic
        id: consolidate
        shell: python
        run: |
          import os

          github_output = {}
          str_to_bool = {"true": True, "false": False}.get
          bool_to_str = {True: "true", False: "false"}.get

          # Consolidate base image logic
          base_config_outputs = list(map(str_to_bool, (
            "${{ steps.filter.outputs.base-root-config-bat }}",
            "${{ steps.filter.outputs.base-root-config-glamour }}",
            "${{ steps.filter.outputs.base-root-config-micro }}",
            "${{ steps.filter.outputs.base-root-config-emacs }}",
            "${{ steps.filter.outputs.base-root-config-nvim }}",
          )))
          base_root_output = str_to_bool("${{ steps.filter.outputs.base-root }}")
          base_changed = str_to_bool("${{ steps.filter.outputs.base }}")

          base_root_changed = any([*base_config_outputs, base_root_output])

          github_output["base-root-changed"] = base_root_changed
          github_output["base-changed"] = base_root_changed or base_changed

          # Consolidate lab change logic
          lab_changes = {
            k: v or base_changed for k, v in
            {
              "lab1-client-changed": str_to_bool("${{ steps.filter.outputs.lab1-client }}"),
              "lab1-changed": str_to_bool("${{ steps.filter.outputs.lab1 }}"),
              "lab2-client-changed": str_to_bool("${{ steps.filter.outputs.lab2-client }}"),
              "lab2-changed": str_to_bool("${{ steps.filter.outputs.lab2 }}"),
              "lab3-client-changed": str_to_bool("${{ steps.filter.outputs.lab3-client }}"),
              "lab3-changed": str_to_bool("${{ steps.filter.outputs.lab3 }}"),
              "lab4-client-changed": str_to_bool("${{ steps.filter.outputs.lab4-client }}"),
              "lab4-changed": str_to_bool("${{ steps.filter.outputs.lab4 }}"),
              "lab5-client-changed": str_to_bool("${{ steps.filter.outputs.lab5-client }}"),
              "lab5-changed": str_to_bool("${{ steps.filter.outputs.lab5 }}"),
              "lab6-client-changed": str_to_bool("${{ steps.filter.outputs.lab6-client }}"),
              "lab6-changed": str_to_bool("${{ steps.filter.outputs.lab6 }}"),
            }.items()
          }
          github_output.update(lab_changes)

          with open(os.environ["GITHUB_OUTPUT"], "a") as output_file:
              for k, v in github_output.items():
                  output_file.write(f"{k}={bool_to_str(v)}\n")

  build-base-root-config-bat:
    needs: determine-changes
    if: needs.determine-changes.outputs.base-root-config-bat == 'true'
    name: 'Build base-root-config-bat container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/.config/bat
    secrets: inherit

  build-base-root-config-glamour:
    needs: determine-changes
    if: needs.determine-changes.outputs.base-root-config-glamour == 'true'
    name: 'Build base-root-config-glamour container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/.config/glamour
    secrets: inherit

  build-base-root-config-micro:
    needs: determine-changes
    if: needs.determine-changes.outputs.base-root-config-micro == 'true'
    name: 'Build base-root-config-micro container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/.config/micro
    secrets: inherit

  build-base-root-config-emacs:
    needs: determine-changes
    if: needs.determine-changes.outputs.base-root-config-emacs == 'true'
    name: 'Build base-root-config-emacs container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/.config/emacs
    secrets: inherit

  build-base-root-config-nvim:
    needs: determine-changes
    if: needs.determine-changes.outputs.base-root-config-nvim == 'true'
    name: 'Build base-root-config-nvim container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/.config/nvim
    secrets: inherit

  base-root-config:
    runs-on: ubuntu-latest
    needs:
      - determine-changes
      - build-base-root-config-bat
      - build-base-root-config-glamour
      - build-base-root-config-micro
      - build-base-root-config-emacs
      - build-base-root-config-nvim
    if: always()
    outputs:
      build-base-root: ${{ steps.consolidate-base-root-config.outputs.build-base-root }}
    steps:
    - name: Consolidate Root Config Build Statuses
      id: consolidate-base-root-config
      shell: python
      run: |
        import os

        github_output = {}
        str_to_bool = {"true": True, "false": False}.get
        bool_to_str = {True: "true", False: "false"}.get
        status_to_bool = ("success", "skipped").__contains__

        conditions = [
            str_to_bool("${{ needs.determine-changes.outputs.base-root-changed }}"), # base_root_changed
            status_to_bool("${{ needs.build-base-root-config-bat.result }}"), # config_bat_result
            status_to_bool("${{ needs.build-base-root-config-glamour.result }}"), # config_glamour_result
            status_to_bool("${{ needs.build-base-root-config-micro.result }}"), # config_micro_result
            status_to_bool("${{ needs.build-base-root-config-emacs.result }}"), # config_emacs_result
            status_to_bool("${{ needs.build-base-root-config-nvim.result }}"), # config_nvim_result
        ]

        github_output["build-base-root"] = all(conditions)

        with open(os.environ["GITHUB_OUTPUT"], "a") as output_file:
            for k, v in github_output.items():
                output_file.write(f"{k}={bool_to_str(v)}\n")

  build-base-root:
    needs: base-root-config
    if: always() && needs.base-root-config.outputs.build-base-root == 'true'
    name: 'Build base-root container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/root/
    secrets: inherit

  build-base:
    needs:
      - determine-changes
      - build-base-root
    if: >-
      always() &&
      needs.determine-changes.outputs.base-changed == 'true' &&
      needs.build-base-root.result != 'failure'
    name: 'Build base container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/base/
    secrets: inherit

  build-lab1-client:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab1-client-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab1 client container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab1/client
    secrets: inherit

  build-lab1:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab1-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab1 container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab1/
    secrets: inherit

  build-lab2-client:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab2-client-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab2 client container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab2/client
    secrets: inherit

  build-lab2:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab2-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab2 container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab2/
    secrets: inherit

  build-lab3-client:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab3-client-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab3 client container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab3/client
    secrets: inherit

  build-lab3:
    needs:
      - determine-changes
      - build-base
    if: >-
      always() &&
      needs.determine-changes.outputs.lab3-changed == 'true' &&
      needs.build-base.result != 'failure'
    name: 'Build lab3 container'
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      path: containers/lab3/
    secrets: inherit
