name: Reusable Container Build

on:
  workflow_call:
    inputs:
      path:
        description: "The path to the directory containing the Dockerfile and build context."
        required: true
        type: string

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Load .env file
        id: dotenv
        uses: xom9ikk/dotenv@v2
        with:
          path: ./

      - name: Set container environment
        run: echo "CONTAINER_ENV=docker" >> $GITHUB_ENV

      - name: Enable Docker buildkit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV

      - name: Define image name and tags
        id: meta
        run: |
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_URL="ghcr.io/$REPO_OWNER_LOWER"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
          VERSION_TAG=$(just get_tag ${{ inputs.path }})
          LATEST_TAG="$(just get_image_name ${{ inputs.path }}):latest"
          echo "VERSION_TAG_LOCAL=$VERSION_TAG" >> $GITHUB_ENV
          echo "VERSION_TAG_REMOTE=$REPO_URL/$VERSION_TAG" >> $GITHUB_ENV
          echo "LATEST_TAG_REMOTE=$REPO_URL/$LATEST_TAG" >> $GITHUB_ENV

      - name: Check if remote tag exists
        id: check_tag
        continue-on-error: true
        run: |
          if docker manifest inspect ${{ env.VERSION_TAG_REMOTE }} > /dev/null; then
            echo "Tag ${{ env.VERSION_TAG_REMOTE }} already exists. Skipping build."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.VERSION_TAG_REMOTE }} does not exist. Proceeding to build."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU for multi-platform builds
        if: steps.check_tag.outputs.exists == 'false'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.check_tag.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.check_tag.outputs.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image for testing (native arch)
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          just build ${{ inputs.path }}

      - name: Test container image (native arch)
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          just test ${{ inputs.path }}

      - name: Build and push multi-platform image
        if: (steps.check_tag.outputs.exists == 'false') && success()
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.path }}
          platforms: linux/amd64 # ,linux/arm64
          push: true
          tags: |
            ${{ env.VERSION_TAG_REMOTE }}
            ${{ env.LATEST_TAG_REMOTE }}
          build-args: |
            BASE_OPENSUSE_VERSION=${{ env.BASE_OPENSUSE_VERSION }}
            BASE_PODMAN_VERSION=${{ env.BASE_PODMAN_VERSION }}
            BASE_COMPOSE_VERSION=${{ env.BASE_COMPOSE_VERSION }}
            BASE_BASH_VERSION=${{ env.BASE_BASH_VERSION }}
            BASE_GIT_VERSION=${{ env.BASE_GIT_VERSION }}
            BASE_GCC_VERSION=${{ env.BASE_GCC_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
